//
//  ContentView.swift
//  watch1 WatchKit Extension
//
//  Created by Mark Booth on 11/11/2019.
//  Copyright Â© 2019 Mark Booth. All rights reserved.
//

import SwiftUI

struct Flags: View {
    @State private var flagDict = ["Malta": "ğŸ‡²ğŸ‡¹" ,"Argentina": "ğŸ‡¦ğŸ‡·",
    "Mauritius":"ğŸ‡²ğŸ‡º", "Austria":"ğŸ‡¦ğŸ‡¹", "Maldives":"ğŸ‡²ğŸ‡»",
    "Australia":"ğŸ‡¦ğŸ‡º","Tajikistan":"ğŸ‡¹ğŸ‡¯","Thailand":"ğŸ‡¹ğŸ‡­",
    "Chad":"ğŸ‡¹ğŸ‡©","Martinique":"ğŸ‡²ğŸ‡¶","Mauritania":"ğŸ‡²ğŸ‡·",
    "Antarctica":"ğŸ‡¦ğŸ‡¶","Montserrat":"ğŸ‡²ğŸ‡¸","Togo":"ğŸ‡¹ğŸ‡¬",
    "Malawi":"ğŸ‡²ğŸ‡¼","Mexico":"ğŸ‡²ğŸ‡½","Malaysia":"ğŸ‡²ğŸ‡¾",
    "Timor-Leste":"ğŸ‡¹ğŸ‡±","Hong Kong":"ğŸ‡­ğŸ‡°",
    "Afghanistan":"ğŸ‡¦ğŸ‡«", "United Nations":"ğŸ‡ºğŸ‡³",
    "Albania":"ğŸ‡¦ğŸ‡±", "Algeria":"ğŸ‡©ğŸ‡¿", "Angola":"ğŸ‡¦ğŸ‡´",
    "Andorra":"ğŸ‡¦ğŸ‡©", "Tunisia":"ğŸ‡¹ğŸ‡³", "Azerbaijan":"ğŸ‡¦ğŸ‡¿",
    "Turkey":"ğŸ‡¹ğŸ‡·", "Tonga":"ğŸ‡¹ğŸ‡´", "Croatia":"ğŸ‡­ğŸ‡·",
    "Hungary":"ğŸ‡­ğŸ‡º", "Taiwan":"ğŸ‡¹ğŸ‡¼", "CÃ´te d'Ivoire":"ğŸ‡¨ğŸ‡®",
    "Tanzania":"ğŸ‡¹ğŸ‡¿", "Cook Islands":"ğŸ‡¨ğŸ‡°", "Oman":"ğŸ‡´ğŸ‡²",
    "Chile":"ğŸ‡¨ğŸ‡±", "Vatican City":"ğŸ‡»ğŸ‡¦", "Cameroon":"ğŸ‡¨ğŸ‡²",
    "Luxembourg":"ğŸ‡±ğŸ‡º","Guernsey":"ğŸ‡¬ğŸ‡¬","Slovenia":"ğŸ‡¸ğŸ‡®",
    "Latvia":"ğŸ‡±ğŸ‡»","Ghana":"ğŸ‡¬ğŸ‡­","Gibraltar":"ğŸ‡¬ğŸ‡®",
    "Slovakia":"ğŸ‡¸ğŸ‡°","Libya":"ğŸ‡±ğŸ‡¾","Greenland":"ğŸ‡¬ğŸ‡±",

    "South Africa":"ğŸ‡¿ğŸ‡¦","Senegal":"ğŸ‡¸ğŸ‡³","Gambia":"ğŸ‡¬ğŸ‡²",
    "China":"ğŸ‡¨ğŸ‡³", "Colombia":"ğŸ‡¨ğŸ‡´", "Venezuela":"ğŸ‡»ğŸ‡ª"
    ]
    
    // set default first selection of keys - gets reset when alert is dismissed
    @State private var keys = ["Malta", "Argentina", "Austria", "Maldives"]
    @State private var correctAnswer = Int.random(in: 0...3)
    @State private var showingScore = false
    @State private var played = 0
    @State private var correct = 0
    @State private var scoreTitle = ""
    @State private var numberTapped = 0
    var body: some View {
        ZStack{
            LinearGradient(gradient: Gradient(colors: [.blue, .black]), startPoint: .top, endPoint: .bottom)
                .edgesIgnoringSafeArea(.all) // doesn't seem to work
            VStack(spacing: 5.0){
                VStack {
                    Text("Tap the flag of")
                    Text(keys[correctAnswer])
                        .foregroundColor(.white)
                        .font(.headline)
                }
                HStack{
                    Button(action: {self.flagTapped(0)
                    }) {
                        Text(self.flagDict[keys[0]]! )
                    }.font(.largeTitle)
                    
                    Button(action: {self.flagTapped(1)}
                    ) {
                        Text(self.flagDict[keys[1]]! )
                    }.font(.largeTitle)
                }
                HStack{
                    Button(action: {self.flagTapped(2)}
                    ) {
                        Text(self.flagDict[keys[2]]!)
                    }.font(.largeTitle)
                    
                    Button(action: {self.flagTapped(3)}
                    ) {
                        Text(self.flagDict[keys[3]]!)
                    }.font(.largeTitle)
                }
                Spacer()
            }
        }
        .foregroundColor(.white)
        .font(.body)
        .alert(isPresented: $showingScore){
            Alert(title: Text(scoreTitle ), message:
                Text("\( self.flagDict [self.keys[self.numberTapped]] ?? "That " )is the flag of \n \(self.keys[self.numberTapped] )\n \(correct) out of \(played)"),
                  dismissButton: .default(Text("Continue")) {
                    self.askQuestion()
                } )
        }
    }
    func flagTapped(_ number : Int)  {
        played += 1
        numberTapped = number
        if number == correctAnswer {
            scoreTitle = "Correct"
            correct += 1
        } else {
            scoreTitle = "Wrong"
        }
        showingScore = true
    }
    func askQuestion() {
       //countries.shuffle()
        keys = flagDict.keys.shuffled()
        
        correctAnswer = Int.random(in: 0...3)
    }
    
    
    
}




struct Flags_Previews: PreviewProvider {
    static var previews: some View {
        Flags()
    }
}
